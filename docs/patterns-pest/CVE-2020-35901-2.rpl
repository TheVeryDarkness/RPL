pattern CVE-2020-35901-2

patt {
    use std::pin::Pin;

    p_pin[
        $S: type where is_not_unpin(self),
    ] = {
        struct $SizedStream {
            $field: $S,
        }

        pub fn $pattern(..) -> _ {
            'mut_self:
            let $self: &mut $SizedStream;
            'pin_new:
            let mut $pin_mut_struct: Pin<&mut $SizedStream> = Pin::<_> { __pointer: copy $self };
            let mut $mut_struct: &mut $SizedStream = copy ($pin_mut_struct.__pointer);
            let $mut_field: &mut $S = &mut ((*$mut_struct).$field);
            let mut $pin_mut_field: Pin<&mut $S> = Pin::<_> { __pointer: copy $mut_field };
        }
    }

    #[diag = "p_pin"]
    p_pin_field[
        $S: type where is_not_unpin(self),
    ] = {
        struct $Framed {
            $field: $S,
        }

        pub fn $pattern(..) -> _ {
            'mut_self:
            let $self: &mut $Framed;
            let mut $self_field: &mut $S = &mut (*$self).$field;
            'pin_new:
            let mut $pin_mut_struct: Pin<&mut $S> = Pin::<_> { __pointer: copy $self_field };
        }
    }
}

diag {
    p_pin = {
        primary(pin_new) = "it is unsound to call `Pin::new_unchecked` on a mutable reference that can be freely moved",
        label(pin_new)   = "`Pin::new_unchecked` called here",
        label(mut_self)  = "mutable reference passed into a public function here",
        note             = "type `{$S}` doesn't implement `Unpin`",
        name             = "unsound_pin_project",
    }
}
