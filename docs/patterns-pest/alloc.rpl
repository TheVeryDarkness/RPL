pattern alloc

patt {
    p[$T: type] = 
        alloc_cast_write[$T = $T] 
        - alloc_check_cast_write[$T = $T] 
        - alloc_cast_check_write[$T = $T] 
        - alloc_cast_check_as_write[$T = $T]
}

util {
    alloc_cast_write[$T: type] = {
        fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _); // _3
            let $ptr_2: *mut $T = move $ptr_1 as *mut $T (PtrToPtr); // _2
            'write:
            (*$ptr_2) = _;
        }
    }
    alloc_check_cast_write[$T: type] = {
        fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _); // _2
            let $const_ptr_1: *const u8 = copy $ptr_1 as *const u8 (PtrToPtr); // _19
            let $addr_1: usize = copy $const_ptr_1 as usize (Transmute); // _20
            // It's weird that `$ptr_2` can only be declared before `switchInt`
            // switchInt(move $addr_1) {
            //     0_usize => {}
            //     _ => {}
            // }
            let $ptr_2: *mut $T = copy $ptr_1 as *mut $T (PtrToPtr); // _4
            'write:
            (*$ptr_2) = _;
        }
    }
    alloc_cast_check_write[$T: type] = {
        fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _); // _3
            let $ptr_2: *mut $T = move $ptr_1 as *mut $T (PtrToPtr); // _2
            let $const_ptr_1: *const u8 = copy $ptr_2 as *const u8 (PtrToPtr); // _19
            let $addr_1: usize = copy $const_ptr_1 as usize (Transmute); // _20
            // switchInt(move $addr_1) {
            //     0_usize => {}
            //     _ => {}
            // }
            'write:
            (*$ptr_2) = _;
        }
    }
    alloc_cast_check_as_write[$T: type] = {
        fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _); // _3
            let $ptr_2: *mut $T = move $ptr_1 as *mut $T (PtrToPtr); // _2
            let $addr_1: usize = copy $ptr_2 as usize (PointerExposeProvenance); // _6
            // switchInt(move $addr_1) {
            //     0_usize => {}
            //     _ => {}
            // }
            'write:
            (*$ptr_2) = _;
        }
    }
}

diag {
    p = {
        primary(write) = "it is an undefined behavior to dereference a null pointer, and `std::alloc::alloc` may return a null pointer",
        label(alloc)   = "pointer created here",
        label(write)   = "pointer used here",
        note           = "See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc",
        // help           = "check whether it's null before dereferencing",
        name           = "unchecked_allocated_pointer",
        level          = "warn",
    }
}
