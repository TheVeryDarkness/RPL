pattern CVE-2020-25016

patt {
    #[diag = "p_unsound_cast"]
    #[const(mutability_1 = "", mutability_2 = "")]
    p_unsound_cast_const[
        $T: type where is_all_safe_trait(self) && !is_primitive(self)
    ] = fn _ (..) -> _ {
        'cast_from:
        let $from_slice: &[$T] = _;
        let $from_raw: *const [$T] = &raw const *$from_slice;
        let $from_len: usize = PtrMetadata(copy $from_slice);
        let $ty_size: usize = SizeOf($T);
        let $to_ptr_t: *const $T = move $from_raw as *const $T (PtrToPtr);
        let $to_ptr: *const u8 = move $to_ptr_t as *const u8 (PtrToPtr);
        let $to_len: usize = Mul(move $from_len, move $ty_size);
        let $to_raw: *const [u8] = *const [u8] from (copy $to_ptr, copy $to_len);
        'cast_to:
        let $to_slice: &[u8] = &*$to_raw;
    }

    #[diag = "p_unsound_cast"]
    #[const(mutability_1 = "mut ", mutability_2 = "mut ")]
    p_unsound_cast_mut[
        $T: type where is_all_safe_trait(self) && !is_primitive(self)
    ] = fn _ (..) -> _ {
        'cast_from:
        let $from_slice_mut: &mut [$T] = _;
        let $from_slice_ref: &[$T] = &*$from_slice_mut;
        let $from_raw_mut: *mut [$T] = &raw mut *$from_slice_mut;
        let $from_len_mut: usize = PtrMetadata(move $from_slice_ref);
        let $ty_size_mut: usize = SizeOf($T);
        let $to_ptr_mutability_t: *mut $T = move $from_raw_mut as *mut $T (PtrToPtr);
        let $to_ptr_mut: *mut u8 = move $to_ptr_mutability_t as *mut u8 (PtrToPtr);
        let $to_len_mut: usize = Mul(move $from_len_mut, move $ty_size_mut);
        let $to_raw_mut: *mut [u8] = *mut [u8] from (copy $to_ptr_mut, copy $to_len_mut);
        'cast_to:
        let $to_slice_mut: &mut [u8] = &mut *$to_raw_mut;
    }
}

diag {
    p_unsound_cast = {
        primary(cast_to) = "it is unsound to cast any slice `&{$mutability_1}[{$T}]` to a byte slice `&{$mutability_2}[u8]`",
        label(cast_to)   = "casted to a byte slice here",
        note(cast_from)  = "trying to cast from this value of `&{$mutability_1}[{$T}]` type",
        level            = "deny",
        name             = "unsound_slice_cast",
    }
}
