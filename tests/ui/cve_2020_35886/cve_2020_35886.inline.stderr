error: it may be an undefined behavior to offset a pointer using a passed-in integer
  --> tests/ui/cve_2020_35886/cve_2020_35886.rs:36:27
   |
LL |     fn index<'a>(&'a self, idx: usize) -> &'a Self::Output {
   |                            --- length passed in here
LL |         unsafe { self.ptr.wrapping_offset(idx as isize).as_ref() }.unwrap()
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                           |
   |                           offset here
   |                           pointer used here
   |
   = help: check whether it's in bound before offsetting
   = note: See the safety section in https://doc.rust-lang.org/std/primitive.pointer.html#method.offset
   = note: `-D rpl::unchecked-pointer-offset` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::unchecked_pointer_offset)]`

error: it may be an undefined behavior to offset a pointer using a passed-in integer
  --> tests/ui/cve_2020_35886/cve_2020_35886.rs:43:27
   |
LL |     fn index_mut<'a>(&'a mut self, idx: usize) -> &'a mut Self::Output {
   |                                    --- length passed in here
LL |         unsafe { self.ptr.wrapping_offset(idx as isize).as_mut() }.unwrap()
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                           |
   |                           offset here
   |                           pointer used here
   |
   = help: check whether it's in bound before offsetting
   = note: See the safety section in https://doc.rust-lang.org/std/primitive.pointer.html#method.offset

error: aborting due to 2 previous errors

