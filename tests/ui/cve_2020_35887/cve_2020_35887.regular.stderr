error: it is an undefined behavior to offset a pointer using an unchecked integer
  --> tests/ui/cve_2020_35887/cve_2020_35887.rs:44:19
   |
LL |         let ptr = unsafe { alloc(layout) as *mut T };
   |                            ----------------------- pointer used here
...
LL |                 (*(ptr.wrapping_offset(i as isize))) = default;
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ offset here
   |
   = help: check whether it's in bound before offsetting
   = note: See the safety section in https://doc.rust-lang.org/std/primitive.pointer.html#method.offset
   = note: `-D rpl::unchecked-pointer-offset` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::unchecked_pointer_offset)]`

error: resulting pointer `*mut T` has a different alignment than the original alignment that the pointer was created with
  --> tests/ui/cve_2020_35887/cve_2020_35887.rs:38:28
   |
LL |         let ptr = unsafe { alloc(layout) as *mut T };
   |                            -------------^^^^^^^^^^
   |                            |
   |                            pointer created here
   |                            pointer casted here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc
   = note: `-D rpl::misaligned-pointer` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::misaligned_pointer)]`

error: public function `new` allocates a pointer that may be zero-sized, which is an undefined behavior
  --> tests/ui/cve_2020_35887/cve_2020_35887.rs:38:28
   |
LL |     pub fn new(size: usize) -> Self {
   |                ---- size passed in here
...
LL |         let ptr = unsafe { alloc(layout) as *mut T };
   |                            ^^^^^^^^^^^^^ pointer created here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#method.alloc
   = note: `#[deny(rpl::alloc_maybe_zero)]` on by default

error: it is an undefined behavior to offset a pointer using an unchecked integer
  --> tests/ui/cve_2020_35887/cve_2020_35887.rs:79:18
   |
LL |         unsafe { self.ptr.wrapping_offset(idx as isize).as_ref() }.unwrap()
   |                  --------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                  |
   |                  offset here
   |                  pointer used here
   |
   = help: check whether it's in bound before offsetting
   = note: See the safety section in https://doc.rust-lang.org/std/primitive.pointer.html#method.offset

error: it is an undefined behavior to offset a pointer using an unchecked integer
  --> tests/ui/cve_2020_35887/cve_2020_35887.rs:86:18
   |
LL |         unsafe { self.ptr.wrapping_offset(idx as isize).as_mut() }.unwrap()
   |                  --------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                  |
   |                  offset here
   |                  pointer used here
   |
   = help: check whether it's in bound before offsetting
   = note: See the safety section in https://doc.rust-lang.org/std/primitive.pointer.html#method.offset

error: aborting due to 5 previous errors

