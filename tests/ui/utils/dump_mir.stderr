note: MIR of `test`
  --> tests/ui/utils/dump_mir.rs:10:1
   |
LL |   #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |   ------------------------------------ MIR dumpped because of this attribute
...
LL | / fn test() {
LL | |
LL | |
LL | |
...  |
LL | |     }
LL | | }
   | |_^
   |
   = note: see `./mir_dump/dump_mir.test.-------.dump_mir..mir` for dumpped MIR
   = note: see `./mir_dump/dump_mir.test.-------.dump_mir..mir.cfg.dot` for dumpped control flow graph
   = note: see `./mir_dump/dump_mir.test.-------.dump_mir..mir.ddg.dot` for dumpped data dependency graph
note: locals and scopes in this MIR
  --> tests/ui/utils/dump_mir.rs:10:1
   |
LL |        fn test() {
   |        ^        - _0: (); // scope[0]
   |  ______|
   | |
LL | |
LL | |
LL | |
LL | |
LL | |          let mut arr: [u8; 20] = [1; 20];
   | |          -   ------- _1: [u8; 20]; // scope[0]
   | | _________|
   | ||
LL | ||         let mut j = 2;
   | ||         -   ----- _2: usize; // scope[1]
   | || ________|
   | |||
LL | |||        // FIXME: this note is not supposed to be here
LL | |||        for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   | |||   _____-___-____------------------------------------------_-
   | |||  |     |   |    |
   | |||  |     |   |    _3: std::iter::Filter<std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>, {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}>; // scope[0]
   | |||  |     |   |    _4: std::iter::Filter<std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>, {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}>; // scope[0]
   | |||  |     |   |    _5: std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>; // scope[0]
   | |||  |     |   |    _6: std::ops::Range<usize>; // scope[0]
   | |||  |     |   |    _7: std::iter::Filter<std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>, {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}>; // scope[2]
   | |||  |     |   |    _8: std::option::Option<usize>; // scope[0]
   | |||  |     |   |    _9: &mut std::iter::Filter<std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>, {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}>; // scope[0]
   | |||  |_____|   _11: usize; // scope[3]
   | ||| ||
LL | ||| ||
LL | ||| ||
LL | ||| ||
...  ||| ||
LL | ||| ||         arr[i] = arr[j];
   | ||| ||         ------   ------
   | ||| ||         |        |   |
   | ||| ||         |        |   _13: usize; // scope[0]
   | ||| ||         |        _12: u8; // scope[0]
   | ||| ||         |        _14: usize; // scope[0]
   | ||| ||         |        _15: bool; // scope[0]
   | ||| ||         _16: usize; // scope[0]
   | ||| ||         _17: bool; // scope[0]
...  ||| ||
LL | ||| ||         j = j + 1;
   | ||| ||             - _18: usize; // scope[0]
LL | ||| ||     }
   | ||| ||     -
   | ||| ||     |
   | ||| ||______10: isize; // scope[0]
   | |||  |_____scope[3]
   | |||        scope[4]
LL | |||    }
   | |||    ^
   | |||____|
   |  ||____scope[0]
   |   |____scope[1]
   |        scope[2]
note: bb0: {
          _1 = [const 1_u8; 20]; // scope[0]
          _2 = const 2_usize; // scope[1]
          _6 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize }; // scope[2]
          _5 = <std::ops::Range<usize> as std::iter::Iterator>::map::<usize, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>(move _6, const ZeroSized: {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}) -> [return: bb1, unwind continue]; // scope[2]
      }
  --> tests/ui/utils/dump_mir.rs:18:14
   |
LL |     let mut arr: [u8; 20] = [1; 20];
   |                             ------- _1 = [const 1_u8; 20]; // scope[0]
LL |     let mut j = 2;
   |                 - _2 = const 2_usize; // scope[1]
LL |     // FIXME: this note is not supposed to be here
LL |     for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   |              -------^^^^^^^^^^^^^^^
   |              |
   |              _6 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize }; // scope[2]
   |              _5 = <std::ops::Range<usize> as std::iter::Iterator>::map::<usize, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>(move _6, const ZeroSized: {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}) -> [return: bb1, unwind continue]; // scope[2]
note: bb1: {
          _4 = <std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}> as std::iter::Iterator>::filter::<{closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}>(move _5, const ZeroSized: {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}) -> [return: bb2, unwind continue]; // scope[2]
      }
  --> tests/ui/utils/dump_mir.rs:18:14
   |
LL |     for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ _4 = <std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}> as std::iter::Iterator>::filter::<{closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}>(move _5, const ZeroSized: {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}) -> [return: bb2, unwind continue]; // scope[2]
note: bb2: {
          _3 = <std::iter::Filter<std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>, {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}> as std::iter::IntoIterator>::into_iter(move _4) -> [return: bb3, unwind continue]; // scope[2]
      }
  --> tests/ui/utils/dump_mir.rs:18:14
   |
LL |     for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ _3 = <std::iter::Filter<std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>, {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}> as std::iter::IntoIterator>::into_iter(move _4) -> [return: bb3, unwind continue]; // scope[2]
note: bb3: {
          _7 = move _3; // scope[2]
          goto -> bb4; // scope[3]
      }
  --> tests/ui/utils/dump_mir.rs:18:5
   |
LL |       for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   |       ^        ------------------------------------------ _7 = move _3; // scope[2]
   |  _____|
   | |
LL | |
LL | |
LL | |
...  |
LL | |         j = j + 1;
LL | |     }
   | |_____^ goto -> bb4; // scope[3]
note: bb4: {
          _9 = &mut _7; // scope[3]
          _8 = <std::iter::Filter<std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>, {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}> as std::iter::Iterator>::next(copy _9) -> [return: bb5, unwind continue]; // scope[3]
      }
  --> tests/ui/utils/dump_mir.rs:18:14
   |
LL |     for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |              |
   |              _9 = &mut _7; // scope[3]
   |              _8 = <std::iter::Filter<std::iter::Map<std::ops::Range<usize>, {closure@tests/ui/utils/dump_mir.rs:18:26: 18:29}>, {closure@tests/ui/utils/dump_mir.rs:18:44: 18:48}> as std::iter::Iterator>::next(copy _9) -> [return: bb5, unwind continue]; // scope[3]
note: bb5: {
          _10 = discriminant(_8); // scope[3]
          switchInt(move _10) -> [0: bb8, 1: bb7, otherwise: bb6]; // scope[3]
      }
  --> tests/ui/utils/dump_mir.rs:18:14
   |
LL |     for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |              |
   |              _10 = discriminant(_8); // scope[3]
   |              switchInt(move _10) -> [0: bb8, 1: bb7, otherwise: bb6]; // scope[3]
note: bb6: {
          unreachable; // scope[3]
      }
  --> tests/ui/utils/dump_mir.rs:18:14
   |
LL |     for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable; // scope[3]
note: bb7: {
          _11 = copy ((_8 as Some).0: usize); // scope[3]
          _13 = copy _2; // scope[4]
          _14 = const 20_usize; // scope[4]
          _15 = Lt(copy _13, copy _14); // scope[4]
          assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, copy _13) -> [success: bb9, unwind continue]; // scope[4]
      }
  --> tests/ui/utils/dump_mir.rs:28:18
   |
LL |     for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
   |         - _11 = copy ((_8 as Some).0: usize); // scope[3]
...
LL |         arr[i] = arr[j];
   |                  ^^^^-^
   |                  |   |
   |                  |   _13 = copy _2; // scope[4]
   |                  _14 = const 20_usize; // scope[4]
   |                  _15 = Lt(copy _13, copy _14); // scope[4]
   |                  assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, copy _13) -> [success: bb9, unwind continue]; // scope[4]
note: bb8: {
          return; // scope[0]
      }
  --> tests/ui/utils/dump_mir.rs:33:2
   |
LL | }
   |  ^ return; // scope[0]
note: bb9: {
          _12 = copy _1[_13]; // scope[4]
          _16 = const 20_usize; // scope[4]
          _17 = Lt(copy _11, copy _16); // scope[4]
          assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, copy _11) -> [success: bb10, unwind continue]; // scope[4]
      }
  --> tests/ui/utils/dump_mir.rs:28:9
   |
LL |         arr[i] = arr[j];
   |         ^^^^^^   ------ _12 = copy _1[_13]; // scope[4]
   |         |
   |         _16 = const 20_usize; // scope[4]
   |         _17 = Lt(copy _11, copy _16); // scope[4]
   |         assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, copy _11) -> [success: bb10, unwind continue]; // scope[4]
note: bb10: {
          _1[_11] = move _12; // scope[4]
          _18 = copy _2; // scope[4]
          _2 = Add(move _18, const 1_usize); // scope[4]
          goto -> bb4; // scope[3]
      }
  --> tests/ui/utils/dump_mir.rs:18:5
   |
LL | /     for i in (0..10).map(|i| i * 2).filter(|&i| i < 10) {
LL | |
LL | |
LL | |
...  |
LL | |         arr[i] = arr[j];
   | |         --------------- _1[_11] = move _12; // scope[4]
...  |
LL | |         j = j + 1;
   | |         ---------
   | |         |   |
   | |         |   _18 = copy _2; // scope[4]
   | |         _2 = Add(move _18, const 1_usize); // scope[4]
LL | |     }
   | |_____^ goto -> bb4; // scope[3]

note: MIR of `critical`
  --> tests/ui/utils/dump_mir.rs:40:1
   |
LL |   #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |   ------------------------------------ MIR dumpped because of this attribute
LL | / fn critical(i: i16, j: i16) -> Result<i16, ()> {
LL | |
LL | |
LL | |
...  |
LL | |     Ok(result)
LL | | }
   | |_^
   |
   = note: see `./mir_dump/dump_mir.critical.-------.dump_mir..mir` for dumpped MIR
   = note: see `./mir_dump/dump_mir.critical.-------.dump_mir..mir.cfg.dot` for dumpped control flow graph
   = note: see `./mir_dump/dump_mir.critical.-------.dump_mir..mir.ddg.dot` for dumpped data dependency graph
note: locals and scopes in this MIR
  --> tests/ui/utils/dump_mir.rs:40:1
   |
LL |     fn critical(i: i16, j: i16) -> Result<i16, ()> {
   |     ^           -       -          --------------- _0: std::result::Result<i16, ()>; // scope[0]
   |     |           |       |
   |     |           |       _2: i16; // scope[0]
   |  ___|           _1: i16; // scope[0]
   | |
LL | |
LL | |
LL | |
...  |
LL | |/      let result = 0_i16;
LL | ||      let k = 3_i16 * i + j * j;
   | ||      -   -   ---------   ----- _5: i16; // scope[0]
   | ||      |   |   |
   | ||      |   |   _4: i16; // scope[0]
   | || _____|   _3: i16; // scope[1]
   | |||
LL | |||     if f2() {
   | |||        ---- _6: bool; // scope[0]
LL | |||
LL | |||
LL | |||         if k > 0 {
   | |||            ----- _7: bool; // scope[0]
...  |||
LL | |||     Ok(result)
   | |||        ------ _8: i16; // scope[0]
LL | ||| }
   | ||| ^
   | |||_|
   |  ||_scope[0]
   |   |_scope[1]
   |     scope[2]
note: bb0: {
          _4 = Mul(const 3_i16, copy _1); // scope[1]
          _5 = Mul(copy _2, copy _2); // scope[1]
          _3 = Add(move _4, move _5); // scope[1]
          _6 = f2() -> [return: bb1, unwind continue]; // scope[2]
      }
  --> tests/ui/utils/dump_mir.rs:48:8
   |
LL |     let k = 3_i16 * i + j * j;
   |             -----------------
   |             |           |
   |             |           _5 = Mul(copy _2, copy _2); // scope[1]
   |             _4 = Mul(const 3_i16, copy _1); // scope[1]
   |             _3 = Add(move _4, move _5); // scope[1]
LL |     if f2() {
   |        ^^^^ _6 = f2() -> [return: bb1, unwind continue]; // scope[2]
note: bb1: {
          switchInt(move _6) -> [0: bb4, otherwise: bb2]; // scope[2]
      }
  --> tests/ui/utils/dump_mir.rs:48:8
   |
LL |     if f2() {
   |        ^^^^ switchInt(move _6) -> [0: bb4, otherwise: bb2]; // scope[2]
note: bb2: {
          _7 = Lt(const 0_i16, copy _3); // scope[2]
          switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope[2]
      }
  --> tests/ui/utils/dump_mir.rs:51:12
   |
LL |         if k > 0 {
   |            ^^^^^
   |            |
   |            _7 = Lt(const 0_i16, copy _3); // scope[2]
   |            switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope[2]
note: bb3: {
          _0 = std::result::Result::<i16, ()>::Err(const ()); // scope[2]
          goto -> bb5; // scope[0]
      }
  --> tests/ui/utils/dump_mir.rs:57:2
   |
LL |             return Err(());
   |                    ------- _0 = std::result::Result::<i16, ()>::Err(const ()); // scope[2]
...
LL | }
   |  ^ goto -> bb5; // scope[0]
note: bb4: {
          _8 = const 0_i16; // scope[2]
          _0 = std::result::Result::<i16, ()>::Ok(move _8); // scope[2]
          goto -> bb5; // scope[0]
      }
  --> tests/ui/utils/dump_mir.rs:57:2
   |
LL |     Ok(result)
   |     ----------
   |     |  |
   |     |  _8 = const 0_i16; // scope[2]
   |     _0 = std::result::Result::<i16, ()>::Ok(move _8); // scope[2]
LL | }
   |  ^ goto -> bb5; // scope[0]
note: bb5: {
          return; // scope[0]
      }
  --> tests/ui/utils/dump_mir.rs:57:2
   |
LL | }
   |  ^ return; // scope[0]

note: MIR of `std::alloc::alloc`
  --> tests/ui/utils/dump_mir.rs:64:13
   |
LL |     #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |     ------------------------------------ MIR dumpped because of this attribute
LL |     let _ = std::alloc::alloc;
   |             ^^^^^^^^^^^^^^^^^
   |
   = note: see `./mir_dump/alloc.alloc-alloc.-------.dump_mir..mir` for dumpped MIR
   = note: see `./mir_dump/alloc.alloc-alloc.-------.dump_mir..mir.cfg.dot` for dumpped control flow graph
   = note: see `./mir_dump/alloc.alloc-alloc.-------.dump_mir..mir.ddg.dot` for dumpped data dependency graph
note: locals and scopes in this MIR
  --> $SRC_DIR/alloc/src/alloc.rs:93:1
   |
LL |         pub unsafe fn alloc(layout: Layout) -> *mut u8 {
   |         ^                   ------             ------- _0: *mut u8; // scope[0]
   |         |                   |
   |  _______|                   _1: std::alloc::Layout; // scope[0]
   | |
LL | |           unsafe {
LL | |               // Make sure we don't accidentally allow omitting the allocator shim in
LL | |               // stable code until it is actually stabilized.
LL | |               core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);
   | |               ----------------------------------------------------------- _2: u8; // scope[0]
LL | |
LL | |               __rust_alloc(layout.size(), layout.align())
   | |                            -------------  --------------
   | |                            |              |
   | |                            |              _5: usize; // scope[0]
   | |                            |              _6: &std::alloc::Layout; // scope[0]
   | |                            _3: usize; // scope[0]
   | |                            _4: &std::alloc::Layout; // scope[0]
LL | |           }
LL | |       }
   | |_______^ scope[0]
   |
  ::: $SRC_DIR/core/src/ptr/mod.rs:1741:1
   |
LL |       / pub unsafe fn read_volatile<T>(src: *const T) -> T {
LL |       |     // SAFETY: the caller must uphold the safety contract for `volatile_load`.
LL |       |     unsafe {
LL |       /         ub_checks::assert_unsafe_precondition!(
LL |       |             check_language_ub,
LL |       |             "ptr::read_volatile requires that the pointer argument is aligned and non-null",
LL |       |             (
LL |       |                 addr: *const () = src as *const (),
   |       |                                   ---------------- _9: *const (); // scope[1]
...        |
LL |       |             ) => ub_checks::is_aligned_and_not_null(addr, align, is_zst)
LL |       |         );
   |       |         -
   |       |_________|
   |       |__________7: bool; // scope[1]
   |                 _8: (); // scope[1]
LL |                 intrinsics::volatile_load(src)
LL |       |     }
LL |       | }
   |       | -
   |       |_|
   |       |_scope[1]
   |         std::ptr::read_volatile::<u8>
   |
  ::: $SRC_DIR/core/src/alloc/layout.rs:150:5
   |
LL |       /     pub const fn size(&self) -> usize {
LL |       |         self.size
LL |       |     }
   |       |     -
   |       |_____|
   |       |_____scope[5]
   |             std::alloc::Layout::size
...
LL |       /     pub const fn align(&self) -> usize {
LL |       |         self.align.as_usize()
   |       |         ---------- _10: std::ptr::Alignment; // scope[6]
LL |       |     }
   |       |     -
   |       |_____|
   |       |_____scope[6]
   |             std::alloc::Layout::align
   |
  ::: $SRC_DIR/core/src/ptr/alignment.rs:94:5
   |
LL |     /       pub const fn as_usize(self) -> usize {
LL |     |           self.0 as usize
   |     |           ---------------
   |     |           |
   |     |           _11: std::ptr::alignment::AlignmentEnum; // scope[7]
   |     |           _12: u64; // scope[7]
   |     |           _13: bool; // scope[7]
   |     |           _14: bool; // scope[7]
   |     |           _15: bool; // scope[7]
LL |     |       }
   |     |       -
   |     |       |
   |     |_______scope[7]
   |             std::ptr::Alignment::as_usize
   |
  ::: $SRC_DIR/core/src/ub_checks.rs:95:1
   |
LL |       / pub(crate) const fn check_language_ub() -> bool {
LL |       |     #[inline]
LL |       /     fn runtime() -> bool {
LL |       |         // Disable UB checks in Miri.
LL |       |         !cfg!(miri)
LL |       |     }
   |       |     -
   |       |_____|
   |       |_____scope[3]
   |             core::ub_checks::check_language_ub::runtime
...
LL |       |     intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
LL |       | }
   |       | -
   |       | |
   |       |_scope[2]
   |         core::ub_checks::check_language_ub
   |
  ::: $SRC_DIR/core/src/mem/mod.rs:467:1
   |
LL |       / pub const fn align_of<T>() -> usize {
LL |       |     intrinsics::min_align_of::<T>()
LL |       | }
   |       | -
   |       |_|
   |       |_scope[4]
   |         std::mem::align_of::<u8>
note: bb0: {
          StorageLive(_2); // scope[0]
          StorageLive(_7); // scope[1]
          _7 = UbChecks(); // scope[2]
          switchInt(move _7) -> [0: bb5, otherwise: bb3]; // scope[1]
      }
   |
  ::: $SRC_DIR/alloc/src/alloc.rs:97:9
   |
LL |           core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);
   |           ----------------------------------------------------------- StorageLive(_2); // scope[0]
   |
  ::: $SRC_DIR/core/src/ub_checks.rs:109:5
   |
LL |       intrinsics::ub_checks() && const_eval_select((), comptime, runtime)
   |       ----------------------- _7 = UbChecks(); // scope[2]
  --> $SRC_DIR/core/src/ptr/mod.rs:1744:9
   |
LL | /         ub_checks::assert_unsafe_precondition!(
LL | |             check_language_ub,
LL | |             "ptr::read_volatile requires that the pointer argument is aligned and non-null",
LL | |             (
...  |
LL | |             ) => ub_checks::is_aligned_and_not_null(addr, align, is_zst)
LL | |         );
   | |         ^
   | |         |
   | |_________StorageLive(_7); // scope[1]
   |           switchInt(move _7) -> [0: bb5, otherwise: bb3]; // scope[1]
note: bb1: {
          StorageDead(_5); // scope[0]
          StorageDead(_3); // scope[0]
          return; // scope[0]
      }
  --> $SRC_DIR/alloc/src/alloc.rs:101:2
   |
LL |         __rust_alloc(layout.size(), layout.align())
   |                                                   -
   |                                                   |
   |                                                   StorageDead(_5); // scope[0]
   |                                                   StorageDead(_3); // scope[0]
LL |     }
LL | }
   |  ^ return; // scope[0]
note: bb2: {
          StorageDead(_2); // scope[0]
          StorageLive(_3); // scope[0]
          StorageLive(_4); // scope[0]
          _4 = &_1; // scope[0]
          _3 = copy (_1.0: usize); // scope[5]
          StorageDead(_4); // scope[0]
          StorageLive(_5); // scope[0]
          StorageLive(_6); // scope[0]
          _6 = &_1; // scope[0]
          StorageLive(_10); // scope[6]
          _10 = copy (_1.1: std::ptr::Alignment); // scope[6]
          StorageLive(_12); // scope[6]
          StorageLive(_13); // scope[6]
          StorageLive(_14); // scope[6]
          StorageLive(_15); // scope[6]
          StorageLive(_11); // scope[7]
          _11 = copy (_10.0: std::ptr::alignment::AlignmentEnum); // scope[7]
          _12 = discriminant(_11); // scope[7]
          _13 = Ge(copy _12, const 1_u64); // scope[7]
          _14 = Le(copy _12, const 9223372036854775808_u64); // scope[7]
          _15 = BitAnd(move _13, move _14); // scope[7]
          assume(move _15); // scope[7]
          _5 = copy _12 as usize (IntToInt); // scope[7]
          StorageDead(_11); // scope[7]
          StorageDead(_15); // scope[6]
          StorageDead(_14); // scope[6]
          StorageDead(_13); // scope[6]
          StorageDead(_12); // scope[6]
          StorageDead(_10); // scope[6]
          StorageDead(_6); // scope[0]
          _0 = alloc::alloc::__rust_alloc(move _3, move _5) -> [return: bb1, unwind unreachable]; // scope[0]
      }
  --> $SRC_DIR/alloc/src/alloc.rs:99:9
   |
LL |         core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);
   |                                                                    - StorageDead(_2); // scope[0]
LL |
LL |         __rust_alloc(layout.size(), layout.align())
   |         ^^^^^^^^^^^^^-------------^^--------------^
   |         |            |           |  |            |
   |         |            |           |  |            StorageDead(_6); // scope[0]
   |         |            |           |  StorageLive(_5); // scope[0]
   |         |            |           |  StorageLive(_6); // scope[0]
   |         |            |           |  _6 = &_1; // scope[0]
   |         |            |           StorageDead(_4); // scope[0]
   |         |            StorageLive(_3); // scope[0]
   |         |            StorageLive(_4); // scope[0]
   |         |            _4 = &_1; // scope[0]
   |         _0 = alloc::alloc::__rust_alloc(move _3, move _5) -> [return: bb1, unwind unreachable]; // scope[0]
   |
  ::: $SRC_DIR/core/src/alloc/layout.rs:151:9
   |
LL |         self.size
   |         --------- _3 = copy (_1.0: usize); // scope[5]
...
LL |         self.align.as_usize()
   |         ---------- ----------
   |         |          |        |
   |         |          |        StorageDead(_10); // scope[6]
   |         |          StorageLive(_12); // scope[6]
   |         |          StorageLive(_13); // scope[6]
   |         |          StorageLive(_14); // scope[6]
   |         |          StorageLive(_15); // scope[6]
   |         |          StorageDead(_15); // scope[6]
   |         |          StorageDead(_14); // scope[6]
   |         |          StorageDead(_13); // scope[6]
   |         |          StorageDead(_12); // scope[6]
   |         StorageLive(_10); // scope[6]
   |         _10 = copy (_1.1: std::ptr::Alignment); // scope[6]
   |
  ::: $SRC_DIR/core/src/ptr/alignment.rs:95:9
   |
LL |         self.0 as usize
   |         ---------------
   |         |             |
   |         |             StorageDead(_11); // scope[7]
   |         StorageLive(_11); // scope[7]
   |         _11 = copy (_10.0: std::ptr::alignment::AlignmentEnum); // scope[7]
   |         _12 = discriminant(_11); // scope[7]
   |         _13 = Ge(copy _12, const 1_u64); // scope[7]
   |         _14 = Le(copy _12, const 9223372036854775808_u64); // scope[7]
   |         _15 = BitAnd(move _13, move _14); // scope[7]
   |         assume(move _15); // scope[7]
   |         _5 = copy _12 as usize (IntToInt); // scope[7]
note: bb3: {
          StorageLive(_9); // scope[1]
          _9 = const {alloc2: *const u8} as *const () (PtrToPtr); // scope[1]
          _8 = std::ptr::read_volatile::precondition_check(move _9, const 1_usize, const <u8 as std::mem::SizedTypeProperties>::IS_ZST) -> [return: bb4, unwind unreachable]; // scope[1]
      }
  --> $SRC_DIR/core/src/ptr/mod.rs:1744:9
   |
LL | /         ub_checks::assert_unsafe_precondition!(
LL | |             check_language_ub,
LL | |             "ptr::read_volatile requires that the pointer argument is aligned and non-null",
LL | |             (
LL | |                 addr: *const () = src as *const (),
   | |                                   ----------------
   | |                                   |
   | |                                   StorageLive(_9); // scope[1]
   | |                                   _9 = const {alloc2: *const u8} as *const () (PtrToPtr); // scope[1]
...  |
LL | |             ) => ub_checks::is_aligned_and_not_null(addr, align, is_zst)
LL | |         );
   | |_________^ _8 = std::ptr::read_volatile::precondition_check(move _9, const 1_usize, const <u8 as std::mem::SizedTypeProperties>::IS_ZST) -> [return: bb4, unwind unreachable]; // scope[1]
note: bb4: {
          StorageDead(_9); // scope[1]
          goto -> bb5; // scope[1]
      }
  --> $SRC_DIR/core/src/ptr/mod.rs:1744:9
   |
LL | /         ub_checks::assert_unsafe_precondition!(
LL | |             check_language_ub,
LL | |             "ptr::read_volatile requires that the pointer argument is aligned and non-null",
LL | |             (
...  |
LL | |             ) => ub_checks::is_aligned_and_not_null(addr, align, is_zst)
LL | |         );
   | |         ^
   | |         |
   | |_________StorageDead(_9); // scope[1]
   |           goto -> bb5; // scope[1]
note: bb5: {
          StorageDead(_7); // scope[1]
          _2 = std::intrinsics::volatile_load::<u8>(const {alloc2: *const u8}) -> [return: bb2, unwind unreachable]; // scope[1]
      }
  --> $SRC_DIR/core/src/ptr/mod.rs:1753:9
   |
LL | /         ub_checks::assert_unsafe_precondition!(
LL | |             check_language_ub,
LL | |             "ptr::read_volatile requires that the pointer argument is aligned and non-null",
LL | |             (
...  |
LL | |             ) => ub_checks::is_aligned_and_not_null(addr, align, is_zst)
LL | |         );
   | |_________- StorageDead(_7); // scope[1]
LL |           intrinsics::volatile_load(src)
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ _2 = std::intrinsics::volatile_load::<u8>(const {alloc2: *const u8}) -> [return: bb2, unwind unreachable]; // scope[1]
   = note: this note originates in the macro `ub_checks::assert_unsafe_precondition` (in Nightly builds, run with -Z macro-backtrace for more info)

note: MIR of `main::{closure#0}`
  --> tests/ui/utils/dump_mir.rs:78:13
   |
LL |     #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |     ------------------------------------ MIR dumpped because of this attribute
LL |     let _ = |x: i32| x + 1;
   |             ^^^^^^^^^^^^^^
   |
   = note: see `./mir_dump/dump_mir.main-{closure#0}.-------.dump_mir..mir` for dumpped MIR
   = note: see `./mir_dump/dump_mir.main-{closure#0}.-------.dump_mir..mir.cfg.dot` for dumpped control flow graph
   = note: see `./mir_dump/dump_mir.main-{closure#0}.-------.dump_mir..mir.ddg.dot` for dumpped data dependency graph
note: locals and scopes in this MIR
  --> tests/ui/utils/dump_mir.rs:78:13
   |
LL |     let _ = |x: i32| x + 1;
   |             ^-^^^^^^-^^^^^
   |             ||      |
   |             ||      _0: i32; // scope[0]
   |             |_2: i32; // scope[0]
   |             _1: &{closure@tests/ui/utils/dump_mir.rs:78:13: 78:21}; // scope[0]
   |             scope[0]
note: bb0: {
          _0 = Add(copy _2, const 1_i32); // scope[0]
          return; // scope[0]
      }
  --> tests/ui/utils/dump_mir.rs:78:27
   |
LL |     let _ = |x: i32| x + 1;
   |                      -----^ return; // scope[0]
   |                      |
   |                      _0 = Add(copy _2, const 1_i32); // scope[0]

note: MIR of `<std::result::IntoIter<T> as std::iter::Iterator>::next`
  --> tests/ui/utils/dump_mir.rs:87:13
   |
LL |     #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |     ------------------------------------ MIR dumpped because of this attribute
LL |     let _ = <std::result::IntoIter<&str> as std::iter::Iterator>::next;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: see `./mir_dump/core.result-{impl#20}-next.-------.dump_mir..mir` for dumpped MIR
   = note: see `./mir_dump/core.result-{impl#20}-next.-------.dump_mir..mir.cfg.dot` for dumpped control flow graph
   = note: see `./mir_dump/core.result-{impl#20}-next.-------.dump_mir..mir.ddg.dot` for dumpped data dependency graph
note: locals and scopes in this MIR
  --> $SRC_DIR/core/src/result.rs:1902:5
   |
LL |        fn next(&mut self) -> Option<T> {
   |        ^       ---------     --------- _0: std::option::Option<T>; // scope[0]
   |        |       |
   |   _____|       _1: &mut std::result::IntoIter<T>; // scope[0]
   |  |
LL |  |         self.inner.take()
   |  |         ---------- _2: &mut std::option::Option<T>; // scope[0]
LL |  |     }
   |  |_____^ scope[0]
   |
  ::: $SRC_DIR/core/src/option.rs:1719:5
   |
LL |  /     pub const fn take(&mut self) -> Option<T> {
LL |  |         // FIXME(const-hack) replace `mem::replace` by `mem::take` when the latter is const ready
LL |  |         mem::replace(self, None)
   |  |                            ---- _3: std::option::Option<T>; // scope[1]
LL |  |     }
   |  |     -
   |  |_____|
   |  |_____scope[1]
   |        std::option::Option::<T>::take
   |
  ::: $SRC_DIR/core/src/mem/mod.rs:862:1
   |
LL | /  pub const fn replace<T>(dest: &mut T, src: T) -> T {
LL | |      // It may be tempting to use `swap` to avoid `unsafe` here. Don't!
LL | |      // The compiler optimizes the implementation below to two `memcpy`s
LL | |      // while `swap` would require at least three. See PR#83022 for details.
...  |
LL | |/         let result = ptr::read(dest);
LL | ||         ptr::write(dest, src);
LL | ||         result
LL | ||     }
   | ||_____- scope[3]
LL | |  }
   | |  -
   | |  |
   | |__scope[2]
   |    std::mem::replace::<std::option::Option<T>>
   |
  ::: $SRC_DIR/core/src/ptr/mod.rs:1336:1
   |
LL |  / pub const unsafe fn read<T>(src: *const T) -> T {
LL |  |     // It would be semantically correct to implement this via `copy_nonoverlapping`
LL |  |     // and `MaybeUninit`, as was done before PR #109035. Calling `assume_init`
LL |  |     // provides enough information to know that this is a typed operation.
...   |
LL |  |     }
LL |  | }
   |  | -
   |  |_|
   |  |_scope[4]
   |    std::ptr::read::<std::option::Option<T>>
...
LL |  / pub const unsafe fn write<T>(dst: *mut T, src: T) {
LL |  |     // Semantically, it would be fine for this to be implemented as a
LL |  |     // `copy_nonoverlapping` and appropriate drop suppression of `src`.
...   |
LL |  |     }
LL |  | }
   |  | -
   |  |_|
   |  |_scope[5]
   |    std::ptr::write::<std::option::Option<T>>
note: bb0: {
          StorageLive(_2); // scope[0]
          _2 = &mut ((*_1).0: std::option::Option<T>); // scope[0]
          _3 = std::option::Option::<T>::None; // scope[1]
          _0 = copy ((*_1).0: std::option::Option<T>); // scope[4]
          ((*_1).0: std::option::Option<T>) = copy _3; // scope[5]
          StorageDead(_2); // scope[0]
          return; // scope[0]
      }
  --> $SRC_DIR/core/src/result.rs:1904:6
   |
LL |         self.inner.take()
   |         ----------      - StorageDead(_2); // scope[0]
   |         |
   |         StorageLive(_2); // scope[0]
   |         _2 = &mut ((*_1).0: std::option::Option<T>); // scope[0]
LL |     }
   |      ^ return; // scope[0]
   |
  ::: $SRC_DIR/core/src/option.rs:1721:28
   |
LL |         mem::replace(self, None)
   |                            ---- _3 = std::option::Option::<T>::None; // scope[1]
   |
  ::: $SRC_DIR/core/src/ptr/mod.rs:1375:9
   |
LL |         crate::intrinsics::read_via_copy(src)
   |         ------------------------------------- _0 = copy ((*_1).0: std::option::Option<T>); // scope[4]
...
LL |         intrinsics::write_via_move(dst, src)
   |         ------------------------------------ ((*_1).0: std::option::Option<T>) = copy _3; // scope[5]

error: abort due to debugging
  --> tests/ui/utils/dump_mir.rs:5:1
   |
LL | #[rpl::dump_mir(dump_cfg, dump_ddg)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL | #[rpl::dump_mir(dump_cfg, dump_ddg)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[rpl::dump_hir]`, `#[rpl::print_hir]` and `#[rpl::dump_mir]` are only used for debugging
   = note: this error is to remind you removing these attributes
help: remove this attribute
   |
LL - #[rpl::dump_mir(dump_cfg, dump_ddg)]
   |
help: remove this attribute
   |
LL - #[rpl::dump_mir(dump_cfg, dump_ddg)]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_mir(dump_cfg, dump_ddg)]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_mir(dump_cfg, dump_ddg)]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_mir(dump_cfg, dump_ddg)]
LL +
   |

error: aborting due to 1 previous error

